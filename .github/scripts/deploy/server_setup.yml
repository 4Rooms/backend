---
- name: Server setup
  hosts: all
  become: true

  vars:
    docker_edition: 'ce'
    docker_install_compose_plugin: true

  # Setup packages
  pre_tasks:
    - name: Update apt cache.
      ansible.builtin.apt: update_cache=true cache_valid_time=600
      changed_when: false

    - name: List packages
      shell: dpkg-query -f '${binary:Package}\n' -W
      register: packages

    - name: Print packages
      debug:
        msg: "{{ packages.stdout_lines }}"

    - name: Stop and disable unneeded services
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      with_items:
        - nginx

    - name: Installing required packages
      apt: name={{item}} state=present
      with_items:
        - git
        - python3-pip

    - name: Removing unneeded packages
      apt: name={{item}} state=absent
      with_items:
        - nginx

    - name: Docker python package
      ansible.builtin.pip:
        name: docker

  # Docker
  roles:
    - geerlingguy.docker

  tasks:
    # Loki Docker Driver
    # https://grafana.com/docs/loki/latest/clients/docker-driver/
    - name: Install Loki Docker Driver
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: enable
      notify:
        - restart docker

    - name: Configure Default Docker Logging Driver
      ansible.builtin.template:
        src: templates/daemon.json.j2
        dest: /etc/docker/daemon.json
      notify:
        - restart docker

    # Traefik
    - name: Create dirs for traefik
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/traefik
        - /etc/traefik/certificates

    - name: Synchronize traefik config
      become: true
      synchronize:
        src: files/traefik.toml
        dest: /etc/traefik/traefik.toml

    - name: Start traefik
      become: true
      community.docker.docker_container:
        name: traefik
        image: traefik:v2.10
        state: "started"
        restart_policy: "unless-stopped"
        recreate: true

        env:
          CF_DNS_API_TOKEN: "{{ CF_DNS_API_TOKEN }}"
          CLOUDFLARE_POLLING_INTERVAL: "2"
          CLOUDFLARE_PROPAGATION_TIMEOUT: "500"

        volumes:
          - /var/run/docker.sock:/var/run/docker.sock

        mounts:
          - type: bind
            read_only: false
            source: /etc/traefik/
            target: /etc/traefik/

        exposed_ports:
          - 80
          - 443

        published_ports:
          - 80:80
          - 443:443


    # Grafana agent
    # https://grafana.com/docs/agent/latest/static/configuration/integrations/node-exporter-config/

    - name: Create dirs for grafana agent
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/grafana-agent

    - name: Create config for grafana agent
      become: true
      ansible.builtin.template:
        src: templates/grafana-agent.yaml.j2
        dest: /etc/grafana-agent/grafana-agent.yaml

    - name: Start grafana agent
      become: true
      community.docker.docker_container:
        name: grafana-agent
        image: grafana/agent:v0.35.4
        command: ["--config.file=/etc/grafana-agent/grafana-agent.yaml"]
        state: "started"
        restart_policy: "unless-stopped"
        recreate: true

        network_mode: "host"
        pid_mode: "host"

        capabilities:
          - sys_time

        mounts:
          - type: bind
            source: /etc/grafana-agent/
            target: /etc/grafana-agent/
            read_only: true

          - type: bind
            source: /
            target: /host/root/
            read_only: true
            propagation: rslave

          - type: bind
            source: /proc/
            target: /host/proc/
            read_only: true
            propagation: rslave

          - type: bind
            source: /sys/
            target: /host/sys/
            read_only: true
            propagation: rslave
