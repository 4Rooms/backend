---
- name: deploy
  hosts: all

  vars:
    domain: "{{ PROD_DOMAIN if BRANCH == 'master' else TEST_DOMAIN }}"
    router: "{{ 'prod' if BRANCH == 'master' else 'test' }}"
    img_name: "{{ 'prod' if BRANCH == 'master' else 'test' }}"
    django_host: "https://{{ domain }}/"

  tasks:
    - name: Debug
      ansible.builtin.debug:
        var: domain

    - name: Build an image
      delegate_to: localhost
      community.docker.docker_image:
        source: build
        build:
          path: ../../../
          dockerfile: .github/scripts/deploy/Dockerfile
          nocache: true
          pull: true
          rm: true

        force_source: true
        force_tag: true
        name: chat-{{ img_name }}
        tag: latest
        archive_path: /tmp/chat_image.tar
      register: build_result
      changed_when: build_result is changed

    - name: Save build logs to a file
      copy:
        content: "{{ build_result.stdout }}"
        dest: /tmp/image_build.log

    - import_tasks: test_image.yml

    - name: Synchronize image
      synchronize:
        src: /tmp/chat_image.tar
        dest: /tmp/chat_image.tar

    - name: Load image from archive
      become: true
      community.docker.docker_image:
        name: chat-{{ img_name }}
        tag: latest
        load_path: /tmp/chat_image.tar
        source: load
        force_source: true
        force_tag: true

    - name: Create a volume for data
      community.docker.docker_volume:
        name: chat-{{ img_name }}-data

    - name: Create a volume for db
      community.docker.docker_volume:
        name: chat-{{ img_name }}-db

    - import_tasks: redis.yml

    - name: Recreate chat container
      become: true
      vars:
        container_labels:
          - key: "traefik.enable"
            value: "true"
          - key: "traefik.http.routers.{{ router }}.rule"
            value: "Host(`{{ domain }}`)"
          - key: "traefik.http.routers.{{ router }}.tls"
            value: "true"
          - key: "traefik.http.routers.{{ router }}.tls.certresolver"
            value: "letsencrypt"

      community.docker.docker_container:
        name: chat-{{ img_name }}
        image: chat-{{ img_name }}
        state: "started"
        restart: true
        recreate: true
        restart_policy: "unless-stopped"

        env:
          DJANGO_MEDIA_ROOT: "/data/"
          DJANGO_DB_PATH: "/db/db.sqlite3"
          DJANGO_SECRET_KEY: "{{ DJANGO_SECRET_KEY }}"
          HOST_USER_EMAIL: "{{ HOST_USER_EMAIL }}"
          HOST_APP_PASSWORD: "{{ HOST_APP_PASSWORD }}"
          DJANGO_HOST: "{{ django_host }}"
          SOCIAL_AUTH_GOOGLE_OAUTH2_KEY: "{{ SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}"
          SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET: "{{ SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}"
          SOCIAL_AUTH_REDIRECT_IS_HTTPS: "true"
          STAFF_USERS: "{{ STAFF_USERS }}"
          REDIS_HOST: "redis-{{ img_name }}"
          DJANGO_SETTINGS_MODULE: "config.settings_prod"

        mounts:
          - type: volume
            read_only: false
            source: chat-{{ img_name }}-data
            target: /data/

          - type: volume
            read_only: false
            source: chat-{{ img_name }}-db
            target: /db/

        links:
          - "redis-{{ img_name }}"

        labels: "{{ container_labels | items2dict }}"
